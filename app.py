# -*- coding: utf-8 -*-
"""WineQuality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zH3VhAFPiBZExQIu0Jxk4L9ZfRYZ0Lo-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

#loading dataframe to a pandas data frame
class wine_prediction:
  def predict(self,fixed_acidity,
      volatile_acidity,
      citric_acid,
      residual_sugar,
      chlorides,
      free_sulphur,
      total_sulphur,
      density,
      ph,
      sulphates,
      alocholo):
    wine_dataset =pd.read_csv("./winequalityData.csv")

    corelation = wine_dataset.corr()
    #Data Preprocessing
    #seperating the quality and other columns 
    X = wine_dataset.drop('quality',axis=1)


    #binaryizing the values of quality data set
    Y =  wine_dataset['quality'].apply(lambda value:1 if value>=7 else 0)


    #Training and Testing data
    X_train,X_test,Y_train,Y_test =  train_test_split(X,Y,test_size=0.2,random_state=3)

    #Model training
    #RandomForestClassifierModel
    model = RandomForestClassifier()

    #training the model
    model.fit(X_train,Y_train)

    #model evaluation
    X_test_prediction =  model.predict(X_test)
    test_data_score =  accuracy_score(X_test_prediction,Y_test)

    print("Test Data Accuracy ",test_data_score)

    #predicting system
    input_data = (fixed_acidity,
      volatile_acidity,
      citric_acid,
      residual_sugar,
      chlorides,
      free_sulphur,
      total_sulphur,
      density,
      ph,
      sulphates,
      alocholo)
    #changing into numpy array
    input_data_numpy_array = np.asarray(input_data)
    #input reshape
    reshaped_data = input_data_numpy_array.reshape(1,-1)

    prediction = model.predict(reshaped_data)
    if(prediction[0]==1):
      return "Good Quality :)"
    else:
      return "Bad Quality :|"

























#this is imported as object
from fastapi import FastAPI,Path
from fastapi.middleware.cors import CORSMiddleware
from fastapi import Request
app = FastAPI() 

#GET,POST,PUT,DELETE
#uvicorn appFileName:moduleName(app) --reload


app = FastAPI()

# Set up CORS
origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


students = {
  1:{
    "name":"Pavan",
    "age":18,
    "class":"12"
   }
}
#PostMan http://127.0.0.1:8000/get-by-name Now send through parameters
@app.get("/")
def index():
    return {"name":"Hello world"}


@app.get("/get-student/{student_id}")
def get_student(student_id:int):
  return students[student_id]
 
@app.post("/get-by-name")
async def get_student(wineData:Request):
  data = await wineData.json()
  obj=wine_prediction();
  ans = obj.predict(data["fixed_acidity"],data["volatile_acidity"],data["citric_acid"],data["residual_sugar"],data["chlorides"],data["free_sulphur"],data["total_sulphur"],data["density"],data["ph"],data["sulphates"],data["alocholo"])
  return {"Data":ans}
 

